{"version":3,"sources":["github-svgrepo-com.svg","App.js","reportWebVitals.js","index.js"],"names":["submit","textInput","document","getElementById","value","requestOptions","method","headers","body","JSON","stringify","text","console","log","fetch","then","response","a","json","data","ok","error","message","status","Promise","reject","join","catch","to_csv","resArea","tokens","split","App","className","style","color","rows","margin","id","label","placeholder","Button","variant","onClick","target","rel","href","src","github_logo","width","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uNAAe,MAA0B,+C,4BCuDzC,SAASA,IACL,IAAIC,EAAYC,SAASC,eAAe,aAAaC,MAE/CC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,KAAMV,KAGjCW,QAAQC,IAAIR,GAGZS,MAAM,2CAA4CT,GAC7CU,KADL,uCACU,WAAMC,GAAN,iBAAAC,EAAA,sEACiBD,EAASE,OAD1B,UACIC,EADJ,OAGFP,QAAQC,IAAIM,GAGPH,EAASI,GANZ,uBAQQC,EAASF,GAAQA,EAAKG,SAAYN,EAASO,OARnD,kBASSC,QAAQC,OAAOJ,IATxB,OAWmBnB,SAASC,eAAe,cAC9BC,MAAQe,EAAI,OAAWO,KAAK,MAZzC,2CADV,uDAiBKC,OAAM,SAAAN,GAEHT,QAAQS,MAAM,sBAAuBA,MAIjD,SAASO,IACL,IAAIC,EAAU3B,SAASC,eAAe,cAElC2B,EADOD,EAAQzB,MACD2B,MAAM,MACxBF,EAAQzB,MAAQ0B,EAAOJ,KAAK,MAGjBM,MAzFf,WACI,OACI,qBAAKC,UAAU,MAAf,SAEI,yBAAQA,UAAU,aAAlB,UACI,0CACY,sBAAMC,MAAO,CAACC,MAAO,WAArB,sBADZ,2BAIA,0BAAUF,UAAU,WACVG,KAAK,KACLC,OAAO,SACPC,GAAG,YACHC,MAAM,aACNC,YAAY,oBAEtB,cAACC,EAAA,EAAD,CAAQC,QAAQ,UACRC,QAAS3C,EACTsC,GAAG,gBAFX,oBAMA,0BAAUL,UAAU,WACVK,GAAG,aACHF,KAAK,KACLI,YAAY,wBAItB,cAACC,EAAA,EAAD,CAAQE,QAASf,EACTU,GAAG,aADX,oBAKA,mBAAGL,UAAU,WACVW,OAAO,SACPC,IAAI,sBACJC,KAAK,qCAHR,SAII,qBAAKC,IAAKC,EACLd,MAAO,CAACG,OAAQ,OAAQY,MAAM,OAAQC,OAAQ,kBCnCxDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3D,SAASC,eAAe,SAM1BgD,M","file":"static/js/main.17b87fd1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-svgrepo-com.b472f676.svg\";","import github_logo from './github-svgrepo-com.svg';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <header className=\"App-header\">\r\n                <h1>\r\n                    Extract <code style={{color: \"#718dbd\"}}>keywords</code> from text documents!\r\n                </h1>\r\n\r\n                <textarea className=\"textarea\"\r\n                          rows=\"10\"\r\n                          margin=\"normal\"\r\n                          id=\"textInput\"\r\n                          label=\"Input text\"\r\n                          placeholder=\"Input text here\"/>\r\n                \r\n                <Button variant=\"primary\"\r\n                        onClick={submit}\r\n                        id='button_submit'>\r\n                    Submit\r\n                </Button>\r\n\r\n                <textarea className=\"textarea\"\r\n                          id=\"textOutput\"\r\n                          rows=\"10\"\r\n                          placeholder=\"Results appear here\">\r\n                </textarea>\r\n\r\n                \r\n                <Button onClick={to_csv}\r\n                        id='button_csv'>\r\n                    To CSV\r\n                </Button>\r\n                \r\n                <a className=\"App-link\"\r\n                   target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"\r\n                   href=\"https://github.com/suhren/keyword/\">\r\n                    <img src={github_logo}\r\n                         style={{margin: \"32px\", width:'64px', height: '64px'}} />\r\n                </a>\r\n\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction submit() {\r\n    let textInput = document.getElementById('textInput').value;\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json'},\r\n        body: JSON.stringify({ text: textInput })\r\n    };\r\n\r\n    console.log(requestOptions);\r\n\r\n    //fetch('http://keyword.bitgnd.com:5000/generate', requestOptions)\r\n    fetch('https://keyword.bitgnd.com:5000/generate', requestOptions)\r\n        .then(async response => {\r\n            const data = await response.json();\r\n            \r\n            console.log(data);\r\n\r\n            // check for error response\r\n            if (!response.ok) {\r\n                // get error message from body or default to response status\r\n                const error = (data && data.message) || response.status;\r\n                return Promise.reject(error);\r\n            }\r\n            let outputTextarea = document.getElementById('textOutput');\r\n            outputTextarea.value = data['result'].join('\\n');\r\n\r\n            //this.setState({ postId: data.id })\r\n        })\r\n        .catch(error => {\r\n            //this.setState({ errorMessage: error.toString() });\r\n            console.error('There was an error!', error);\r\n        });\r\n}\r\n\r\nfunction to_csv() {\r\n    var resArea = document.getElementById(\"textOutput\");\r\n    let text = resArea.value;\r\n    let tokens = text.split('\\n');\r\n    resArea.value = tokens.join(', ');\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}