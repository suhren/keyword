{"version":3,"sources":["github-svgrepo-com.svg","Slider.js","Accordion.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","width","marginLeft","marginRight","verticalAlign","display","label","fontSize","input","color","borderBottom","InputSlider","props","classes","React","useState","val","value","setValue","className","Grid","container","spacing","alignItems","item","xs","Slider","slider","onChange","event","newValue","aria-labelledby","min","max","Input","margin","target","Number","onBlur","id","inputProps","step","type","theme","marginBottom","accordion","backgroundColor","heading","typography","pxToRem","secondaryHeading","palette","text","secondary","icon","height","column","flexBasis","justifyContent","helper","borderLeft","divider","padding","link","primary","main","textDecoration","DetailedAccordion","panel","expanded","setExpanded","Accordion","isExpanded","AccordionSummary","aria-controls","Typography","Divider","AccordionDetails","details","clsx","StyledButton","withStyles","background","border","textTransform","Button","submit","textInput","document","getElementById","slider1","slider2","slider3","slider4","sliderMin","sliderMax","statusText","json","JSON","stringify","ngram","chars","fetch","method","headers","body","then","response","a","data","innerHTML","ok","error","message","status","Promise","reject","flat","join","catch","console","to_csv","resArea","tokens","split","App","style","rows","placeholder","startIcon","onClick","rel","href","src","github_logo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.514aaff2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-svgrepo-com.b472f676.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Input from '@material-ui/core/Input';\r\nimport VolumeUp from '@material-ui/icons/VolumeUp';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '80%',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    verticalAlign: 'top',\r\n    display: 'inline-block',\r\n  },\r\n  label: {\r\n      fontSize: '0.6em',\r\n  },\r\n  input: {\r\n    width: 42,\r\n    color: 'white',\r\n    borderBottom: '2px solid #AAA !important'\r\n  },\r\n});\r\n\r\nexport default function InputSlider(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(props.val);\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (value < props.min) {\r\n      setValue(props.min);\r\n    } else if (value > props.max) {\r\n      setValue(props.max);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item className={classes.label}>\r\n          {props.label}\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Slider\r\n            className={classes.slider}\r\n            value={typeof value === 'number' ? value : 0}\r\n            onChange={handleSliderChange}\r\n            aria-labelledby=\"input-slider\"\r\n            min={props.min}\r\n            max={props.max}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Input\r\n            className={classes.input}\r\n            value={value}\r\n            margin=\"dense\"\r\n            onChange={handleInputChange}\r\n            onBlur={handleBlur}\r\n            id={props.id}\r\n            inputProps={{\r\n              step: 1,\r\n              min: props.min,\r\n              max: props.max,\r\n              type: 'number',\r\n              'aria-labelledby': 'input-slider',\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionActions from '@material-ui/core/AccordionActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport Slider from './Slider'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginBottom: '16px'\r\n  },\r\n  accordion: {\r\n    backgroundColor: '#1b212c',\r\n    color: '#DDD',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto'\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  column: {\r\n    flexBasis: '50%',\r\n    justifyContent: 'center'\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function DetailedAccordion() {\r\n  const classes = useStyles();\r\n  \r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <Accordion className={classes.accordion} expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\r\n        <AccordionSummary\r\n          aria-controls=\"panel1c-content\"\r\n          id=\"panel1c-header\"\r\n        >\r\n        <Typography className={classes.heading}>Options</Typography>\r\n        </AccordionSummary>\r\n        <Divider />\r\n        <AccordionDetails className={classes.details}>\r\n          <div className={classes.column}>\r\n            <Slider min={0} max={100} val={35} id='slider1' label='# of 1-grams'/>\r\n            <Slider min={0} max={100} val={15} id='slider2' label='# of 2-grams'/>\r\n            <Slider min={0} max={100} val={0} id='slider3' label='# of 3-grams'/>\r\n            <Slider min={0} max={100} val={0} id='slider4' label='# of 4-grams'/>\r\n          </div>\r\n          <div className={clsx(classes.column, classes.helper)}>\r\n            <Slider min={1} max={50} val={4} id='sliderMin' label='Min # of characters'/>\r\n            <Slider min={1} max={50} val={30} id='sliderMax' label='Max # of characters'/>\r\n          </div>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}","import github_logo from './github-svgrepo-com.svg';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport './App.css';\r\n\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\n\r\nimport { Accordion, Card, Form, Col, Row } from \"react-bootstrap\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport React from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport DetailedAccordion from './Accordion';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst SEC_COLOR = '#718dbd';\r\nconst SEC_COLOR_DARK = '#5572a5'\r\n\r\n\r\nconst StyledButton = withStyles({\r\n    root: {\r\n        background: SEC_COLOR,\r\n        '&:hover': {\r\n            backgroundColor: SEC_COLOR_DARK,\r\n            color: 'white'\r\n        },\r\n        border: 0,\r\n        color: 'white',\r\n        height: 48,\r\n        padding: '0 30px',\r\n        margin: '1em'\r\n    },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n})(Button);\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <header className=\"App-header\">\r\n                <h1 style={{margin: '1em 0 1em 0'}}>\r\n                    Extract <code style={{color: \"#718dbd\"}}>keywords</code> from text documents!\r\n                </h1>\r\n\r\n                <textarea className=\"textarea\"\r\n                          rows=\"10\"\r\n                          margin=\"normal\"\r\n                          id=\"textInput\"\r\n                          label=\"Input text\"\r\n                          placeholder=\"Input text here\"/>\r\n                \r\n                <DetailedAccordion />\r\n\r\n                {/* <Chip label=\"Barbados\" onDelete={() => {}} /> */}\r\n\r\n                <StyledButton startIcon={<PublishIcon />} onClick={submit} id='button_submit'>\r\n                    SUBMIT\r\n                </StyledButton>\r\n\r\n                <h3 id='statusText' style={{fontSize: '0.65em', color: '#AAAAAA'}}>\r\n                    Status text\r\n                </h3>\r\n\r\n                <textarea className=\"textarea\"\r\n                          id=\"textOutput\"\r\n                          rows=\"10\"\r\n                          placeholder=\"Results appear here\">\r\n                </textarea>\r\n\r\n                \r\n                <StyledButton startIcon={<CachedIcon />} onClick={to_csv} id='button_csv'>\r\n                    TO CSV\r\n                </StyledButton>\r\n                \r\n                <a className=\"App-link\"\r\n                   target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"\r\n                   href=\"https://github.com/suhren/keyword/\">\r\n                    <img src={github_logo}\r\n                         style={{margin: \"32px\", width:'64px', height: '64px'}} />\r\n                </a>\r\n\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction submit() {\r\n    let textInput = document.getElementById('textInput').value;\r\n    let slider1 = document.getElementById('slider1').value;\r\n    let slider2 = document.getElementById('slider2').value;\r\n    let slider3 = document.getElementById('slider3').value;\r\n    let slider4 = document.getElementById('slider4').value;\r\n    let sliderMin = document.getElementById('sliderMin').value;\r\n    let sliderMax = document.getElementById('sliderMax').value;\r\n    let statusText = document.getElementById('statusText');\r\n\r\n    if (textInput == '') {\r\n        return;\r\n    }\r\n\r\n    let json = JSON.stringify({\r\n        text: textInput,\r\n        ngram: [slider1, slider2, slider3, slider4],\r\n        chars: [sliderMin, sliderMax]  \r\n    });\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json'},\r\n        body: json\r\n    };\r\n\r\n    fetch('https://keyword.bitgnd.com:5000/generate', requestOptions)\r\n        .then(async response => {\r\n            const data = await response.json();\r\n            \r\n            statusText.innerHTML = data['message'];\r\n\r\n            // check for error response\r\n            if (!response.ok) {\r\n                // get error message from body or default to response status\r\n                const error = (data && data.message) || response.status;\r\n                return Promise.reject(error);\r\n            }\r\n            let outputTextarea = document.getElementById('textOutput');\r\n            outputTextarea.value = data['result'].flat().join('\\n');\r\n\r\n            //this.setState({ postId: data.id })\r\n        })\r\n        .catch(error => {\r\n            //this.setState({ errorMessage: error.toString() });\r\n            console.error('There was an error!', error);\r\n        });\r\n}\r\n\r\nfunction to_csv() {\r\n    var resArea = document.getElementById(\"textOutput\");\r\n    let text = resArea.value;\r\n    let tokens = text.split('\\n');\r\n    resArea.value = tokens.join(', ');\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}