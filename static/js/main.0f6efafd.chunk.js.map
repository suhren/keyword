{"version":3,"sources":["github-svgrepo-com.svg","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["submit","textInput","document","getElementById","value","requestOptions","method","headers","body","JSON","stringify","text","fetch","then","response","a","json","data","console","log","ok","error","message","status","Promise","reject","join","catch","App","className","style","height","placeholder","id","Button","variant","onClick","target","rel","href","src","github_logo","margin","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uNAAe,GCAA,IDAA,IAA0B,gD,4BEkDzC,SAASA,IACL,IAAIC,EAAYC,SAASC,eAAe,aAAaC,MAE/CC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,KAAMV,KAEjCW,MAAM,0CAA2CP,GAC5CQ,KADL,uCACU,WAAMC,GAAN,iBAAAC,EAAA,sEACiBD,EAASE,OAD1B,UACIC,EADJ,OAGFC,QAAQC,IAAIF,GAGPH,EAASM,GANZ,uBAQQC,EAASJ,GAAQA,EAAKK,SAAYR,EAASS,OARnD,kBASSC,QAAQC,OAAOJ,IATxB,OAWmBnB,SAASC,eAAe,cAC9BC,MAAQa,EAAI,OAAWS,KAAK,MAZzC,2CADV,uDAiBKC,OAAM,SAAAN,GAEHH,QAAQG,MAAM,sBAAuBA,MAMlCO,MA3Ef,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UAEI,0CACa,4CADb,iCAGA,0BAAUC,MAAO,CAACC,OAAQ,SAChBC,YAAY,qBACZC,GAAG,cAGb,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASpC,EAC3BiC,GAAG,gBADX,oBAKA,0BAAUH,MAAO,CAACC,OAAQ,SAChBE,GAAG,aACHD,YAAY,wBAItB,cAACE,EAAA,EAAD,CAAQC,QAAQ,YACRF,GAAG,aADX,oBAKA,mBAAGJ,UAAU,WACVQ,OAAO,SACPC,IAAI,sBACJC,KAAK,qCAHR,SAII,qBAAKC,IAAKC,EACLX,MAAO,CAACY,OAAQ,OAAQC,MAAM,OAAQZ,OAAQ,kBC9BxDa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpD,SAASC,eAAe,SAM1ByC,M","file":"static/js/main.0f6efafd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-svgrepo-com.09f5b9f9.svg\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport github_logo from './github-svgrepo-com.svg';\r\n\r\nimport './App.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\r\n                <p>\r\n                    Generate <code>keywords</code> from large text documents!\r\n                </p>\r\n                <textarea style={{height: '300px'}}\r\n                          placeholder=\"Enter text here...\"\r\n                          id=\"textInput\">\r\n                </textarea>\r\n                \r\n                <Button variant=\"primary\" onClick={submit}\r\n                        id='button_submit'>\r\n                    Submit\r\n                </Button>\r\n\r\n                <textarea style={{height: '400px'}}\r\n                          id=\"textOutput\"\r\n                          placeholder=\"Results appear here\">\r\n                </textarea>\r\n\r\n                \r\n                <Button variant=\"secondary\"\r\n                        id='button_csv'>\r\n                    To CSV\r\n                </Button>\r\n                \r\n                <a className=\"App-link\"\r\n                   target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"\r\n                   href=\"https://github.com/suhren/keyword/\">\r\n                    <img src={github_logo}\r\n                         style={{margin: \"16px\", width:'64px', height: '64px'}} />\r\n                </a>\r\n\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction submit() {\r\n    let textInput = document.getElementById('textInput').value;\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json'},\r\n        body: JSON.stringify({ text: textInput })\r\n    };\r\n    fetch('http://keyword.bitgnd.com:5000/generate', requestOptions)\r\n        .then(async response => {\r\n            const data = await response.json();\r\n            \r\n            console.log(data);\r\n\r\n            // check for error response\r\n            if (!response.ok) {\r\n                // get error message from body or default to response status\r\n                const error = (data && data.message) || response.status;\r\n                return Promise.reject(error);\r\n            }\r\n            let outputTextarea = document.getElementById('textOutput');\r\n            outputTextarea.value = data['result'].join('\\n');\r\n\r\n            //this.setState({ postId: data.id })\r\n        })\r\n        .catch(error => {\r\n            //this.setState({ errorMessage: error.toString() });\r\n            console.error('There was an error!', error);\r\n        });\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}