{"version":3,"sources":["github-svgrepo-com.svg","App.js","reportWebVitals.js","index.js"],"names":["SliderWithInputFormControl","props","React","useState","val","value","setValue","Form","Group","as","Row","style","margin","Col","xs","Label","label","variant","inputProps","id","min","max","onChange","e","target","Control","border","color","backgroundColor","submit","textInput","document","getElementById","slider1","parseInt","slider2","slider3","slider4","sliderMin","sliderMax","statusText","json","JSON","stringify","text","ngram","chars","fetch","method","headers","body","then","response","a","data","innerHTML","ok","error","message","status","Promise","reject","flat","join","catch","console","to_csv","resArea","tokens","split","App","className","rows","placeholder","Accordion","defaultActiveKey","Card","Header","Toggle","Button","eventKey","Collapse","Body","onClick","fontSize","rel","href","src","github_logo","width","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4137f061.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-svgrepo-com.b472f676.svg\";","import github_logo from './github-svgrepo-com.svg';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport './App.css';\r\n\r\nimport { Accordion, Card, Form, Col, Row, Button } from \"react-bootstrap\";\r\n\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport React from 'react';\r\n\r\n\r\nfunction SliderWithInputFormControl(props) {\r\n    const [ value, setValue ] = React.useState(props.val);\r\n    return (\r\n        <Form>\r\n            <Form.Group as={Row} style={{margin: '0px'}}>\r\n                <Col xs=\"4\">\r\n                <Form.Label>\r\n                    <div>{props.label}</div>\r\n                </Form.Label>\r\n                </Col>\r\n                <Col xs=\"6\">\r\n                    <RangeSlider\r\n                        variant='secondary'\r\n                        inputProps={{id: props.id}}\r\n                        min={props.min}\r\n                        max={props.max}\r\n                        value={value}\r\n                        onChange={e => setValue(e.target.value)}\r\n                    />\r\n                </Col>\r\n                <Col xs=\"2\">\r\n                    <Form.Control\r\n                        style={{border: 'none', color: 'white', backgroundColor: '#282c34'}}\r\n                        value={value}\r\n                        onChange={e => setValue(e.target.value)}/>\r\n                </Col>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n}\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <header className=\"App-header\">\r\n                <h1>\r\n                    Extract <code style={{color: \"#718dbd\"}}>keywords</code> from text documents!\r\n                </h1>\r\n\r\n                <textarea className=\"textarea\"\r\n                          rows=\"10\"\r\n                          margin=\"normal\"\r\n                          id=\"textInput\"\r\n                          label=\"Input text\"\r\n                          placeholder=\"Input text here\"/>\r\n                \r\n                <Accordion defaultActiveKey='none'>\r\n\r\n                    <Card style={{backgroundColor:'#444', border: 'none'}}>\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\" style={{color:'#FFFFFF'}}>\r\n                                Options\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Card.Body>\r\n                                <SliderWithInputFormControl min={0} max={100} val={35} id='slider1' label='1-grams'/>\r\n                                <SliderWithInputFormControl min={0} max={100} val={15} id='slider2' label='2-grams'/>\r\n                                <SliderWithInputFormControl min={0} max={100} val={0} id='slider3' label='3-grams'/>\r\n                                <SliderWithInputFormControl min={0} max={100} val={0} id='slider4' label='4-grams'/>\r\n                                <SliderWithInputFormControl min={1} max={50} val={4} id='sliderMin' label='Min. chars'/>\r\n                                <SliderWithInputFormControl min={1} max={50} val={30} id='sliderMax' label='Max. chars'/>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n            \r\n                <Button variant=\"primary\"\r\n                        onClick={submit}\r\n                        style={{margin: '16px'}}\r\n                        id='button_submit'>\r\n                    Submit\r\n                </Button>\r\n\r\n                <h3 id='statusText' style={{fontSize: '0.65em', color: '#AAAAAA'}}>\r\n                    Status text\r\n                </h3>\r\n\r\n                <textarea className=\"textarea\"\r\n                          id=\"textOutput\"\r\n                          rows=\"10\"\r\n                          placeholder=\"Results appear here\">\r\n                </textarea>\r\n\r\n                \r\n                <Button onClick={to_csv}\r\n                        id='button_csv'>\r\n                    To CSV\r\n                </Button>\r\n                \r\n                <a className=\"App-link\"\r\n                   target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"\r\n                   href=\"https://github.com/suhren/keyword/\">\r\n                    <img src={github_logo}\r\n                         style={{margin: \"32px\", width:'64px', height: '64px'}} />\r\n                </a>\r\n\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction submit() {\r\n    let textInput = document.getElementById('textInput').value;\r\n    let slider1 = parseInt(document.getElementById('slider1').value);\r\n    let slider2 = parseInt(document.getElementById('slider2').value);\r\n    let slider3 = parseInt(document.getElementById('slider3').value);\r\n    let slider4 = parseInt(document.getElementById('slider4').value);\r\n    let sliderMin = parseInt(document.getElementById('sliderMin').value);\r\n    let sliderMax = parseInt(document.getElementById('sliderMax').value);\r\n    let statusText = document.getElementById('statusText');\r\n\r\n    if (textInput == '') {\r\n        return;\r\n    }\r\n\r\n    let json = JSON.stringify({\r\n        text: textInput,\r\n        ngram: [slider1, slider2, slider3, slider4],\r\n        chars: [sliderMin, sliderMax]  \r\n    });\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json'},\r\n        body: json\r\n    };\r\n\r\n    fetch('https://keyword.bitgnd.com:5000/generate', requestOptions)\r\n        .then(async response => {\r\n            const data = await response.json();\r\n            \r\n            statusText.innerHTML = data['message'];\r\n\r\n            // check for error response\r\n            if (!response.ok) {\r\n                // get error message from body or default to response status\r\n                const error = (data && data.message) || response.status;\r\n                return Promise.reject(error);\r\n            }\r\n            let outputTextarea = document.getElementById('textOutput');\r\n            outputTextarea.value = data['result'].flat().join('\\n');\r\n\r\n            //this.setState({ postId: data.id })\r\n        })\r\n        .catch(error => {\r\n            //this.setState({ errorMessage: error.toString() });\r\n            console.error('There was an error!', error);\r\n        });\r\n}\r\n\r\nfunction to_csv() {\r\n    var resArea = document.getElementById(\"textOutput\");\r\n    let text = resArea.value;\r\n    let tokens = text.split('\\n');\r\n    resArea.value = tokens.join(', ');\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}